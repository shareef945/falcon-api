name: Build and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment variables
        run: |
          echo "VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/falcon-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/falcon-backend:${{ env.VERSION }}
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/falcon-backend:latest
          cache-to: type=inline

      # - name: Deploy to Production
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
      #     SERVER_USER: ${{ secrets.SERVER_USER }}
      #   run: |
      #     echo "$SSH_PRIVATE_KEY" > deploy_key
      #     chmod 600 deploy_key
      #     ssh -i deploy_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST '
      #       cd /path/to/deployment && \
      #       docker compose pull && \
      #       docker compose down && \
      #       docker compose up -d
      #     '

      # - name: Send Telegram notification
      #   if: always()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     message: |
      #       ${{ job.status == 'success' && 'üöÄ' || '‚ùå' }} Falcon Backend Deployment

      #       Status: ${{ job.status == 'success' && 'Success ‚úÖ' || 'Failed ‚ùå' }}
      #       Version: ${{ env.VERSION }}

      #       ${{ job.status != 'success' && '‚ö†Ô∏è Check GitHub Actions for detailed error logs' || '' }}